Index: libsl1550/libsecondlife/_Packets_.cs
===================================================================
--- libsl1550/libsecondlife/_Packets_.cs	(revision 32)
+++ libsl1550/libsecondlife/_Packets_.cs	(working copy)
@@ -97,10 +97,11 @@
         public uint Sequence
         {
             get { return (uint)((Data[1] << 24) + (Data[2] << 16) + (Data[3] << 8) + Data[4]); }
-            set {
-			Data[1] = (byte)(value >> 24); Data[2] = (byte)(value >> 16); 
-			Data[3] = (byte)(value >> 8);  Data[4] = (byte)(value % 256); 
-		}
+            set
+            {
+			    Data[1] = (byte)(value >> 24); Data[2] = (byte)(value >> 16); 
+			    Data[3] = (byte)(value >> 8);  Data[4] = (byte)(value % 256); 
+		    }
         }
         /// <summary>Numeric ID number of this packet</summary>
         public abstract ushort ID { get; set; }
@@ -727,6 +728,7 @@
         LandStatRequest = 65957,
         LandStatReply = 65958,
         Error = 65959,
+        ObjectIncludeInSearch = 65960,
         PacketAck = 131067,
         OpenCircuit = 131068,
         CloseCircuit = 131069,
@@ -779,7 +781,8 @@
         public abstract PacketType Type { get; }
         public abstract void FromBytes(byte[] bytes, ref int i, ref int packetEnd, byte[] zeroBuffer);
         public abstract void FromBytes(Header header, byte[] bytes, ref int i, ref int packetEnd, byte[] zeroBuffer);
-        public int TickCount;
+        public int ResendCount;
+        internal int TickCount;
 
         public abstract byte[] ToBytes();
         public static PacketType GetType(ushort id, PacketFrequency frequency)
@@ -1135,6 +1138,7 @@
                         case 421: return PacketType.LandStatRequest;
                         case 422: return PacketType.LandStatReply;
                         case 423: return PacketType.Error;
+                        case 424: return PacketType.ObjectIncludeInSearch;
                         case 65531: return PacketType.PacketAck;
                         case 65532: return PacketType.OpenCircuit;
                         case 65533: return PacketType.CloseCircuit;
@@ -1585,6 +1589,7 @@
             if(type == PacketType.LandStatRequest) return new LandStatRequestPacket();
             if(type == PacketType.LandStatReply) return new LandStatReplyPacket();
             if(type == PacketType.Error) return new ErrorPacket();
+            if(type == PacketType.ObjectIncludeInSearch) return new ObjectIncludeInSearchPacket();
             if(type == PacketType.PacketAck) return new PacketAckPacket();
             if(type == PacketType.OpenCircuit) return new OpenCircuitPacket();
             if(type == PacketType.CloseCircuit) return new CloseCircuitPacket();
@@ -1960,6 +1965,7 @@
                         case 421: return new LandStatRequestPacket(header, bytes, ref i);
                         case 422: return new LandStatReplyPacket(header, bytes, ref i);
                         case 423: return new ErrorPacket(header, bytes, ref i);
+                        case 424: return new ObjectIncludeInSearchPacket(header, bytes, ref i);
                         case 65531: return new PacketAckPacket(header, bytes, ref i);
                         case 65532: return new OpenCircuitPacket(header, bytes, ref i);
                         case 65533: return new CloseCircuitPacket(header, bytes, ref i);
@@ -29150,11 +29156,57 @@
             }
         }
 
+        /// <exclude/>
+        public class NewGroupDataBlock
+        {
+            public bool ListInProfile;
+
+            public int Length
+            {
+                get
+                {
+                    return 1;
+                }
+            }
+
+            public NewGroupDataBlock() { }
+            public NewGroupDataBlock(byte[] bytes, ref int i)
+            {
+                FromBytes(bytes, ref i);
+            }
+
+            public void FromBytes(byte[] bytes, ref int i)
+            {
+                try
+                {
+                    ListInProfile = (bytes[i++] != 0) ? (bool)true : (bool)false;
+                }
+                catch (Exception)
+                {
+                    throw new MalformedDataException();
+                }
+            }
+
+            public void ToBytes(byte[] bytes, ref int i)
+            {
+                bytes[i++] = (byte)((ListInProfile) ? 1 : 0);
+            }
+
+            public override string ToString()
+            {
+                StringBuilder output = new StringBuilder();
+                output.AppendLine("-- NewGroupData --");
+                output.Append(String.Format("ListInProfile: {0}", ListInProfile));
+                return output.ToString();
+            }
+        }
+
         private Header header;
         public override Header Header { get { return header; } set { header = value; } }
         public override PacketType Type { get { return PacketType.AvatarGroupsReply; } }
         public AgentDataBlock AgentData;
         public GroupDataBlock[] GroupData;
+        public NewGroupDataBlock NewGroupData;
 
         public AvatarGroupsReplyPacket()
         {
@@ -29163,6 +29215,7 @@
             Header.Reliable = true;
             AgentData = new AgentDataBlock();
             GroupData = new GroupDataBlock[0];
+            NewGroupData = new NewGroupDataBlock();
         }
 
         public AvatarGroupsReplyPacket(byte[] bytes, ref int i) : this()
@@ -29187,6 +29240,7 @@
             }
             for (int j = 0; j < count; j++)
             { GroupData[j].FromBytes(bytes, ref i); }
+            NewGroupData.FromBytes(bytes, ref i);
         }
 
         public AvatarGroupsReplyPacket(Header head, byte[] bytes, ref int i): this()
@@ -29211,12 +29265,13 @@
             }
             for (int j = 0; j < count; j++)
             { GroupData[j].FromBytes(bytes, ref i); }
+            NewGroupData.FromBytes(bytes, ref i);
         }
 
         public override byte[] ToBytes()
         {
             int length = 10;
-            length += AgentData.Length;;
+            length += AgentData.Length;            length += NewGroupData.Length;;
             length++;
             for (int j = 0; j < GroupData.Length; j++) { length += GroupData[j].Length; }
             if (header.AckList.Length > 0) { length += header.AckList.Length * 4 + 1; }
@@ -29226,6 +29281,7 @@
             AgentData.ToBytes(bytes, ref i);
             bytes[i++] = (byte)GroupData.Length;
             for (int j = 0; j < GroupData.Length; j++) { GroupData[j].ToBytes(bytes, ref i); }
+            NewGroupData.ToBytes(bytes, ref i);
             if (header.AckList.Length > 0) { header.AcksToBytes(bytes, ref i); }
             return bytes;
         }
@@ -29238,6 +29294,7 @@
             {
                 output += GroupData[j].ToString() + Environment.NewLine;
             }
+                output += NewGroupData.ToString() + Environment.NewLine;
             return output;
         }
 
@@ -63294,11 +63351,57 @@
             }
         }
 
+        /// <exclude/>
+        public class NewDataBlock
+        {
+            public bool ListInProfile;
+
+            public int Length
+            {
+                get
+                {
+                    return 1;
+                }
+            }
+
+            public NewDataBlock() { }
+            public NewDataBlock(byte[] bytes, ref int i)
+            {
+                FromBytes(bytes, ref i);
+            }
+
+            public void FromBytes(byte[] bytes, ref int i)
+            {
+                try
+                {
+                    ListInProfile = (bytes[i++] != 0) ? (bool)true : (bool)false;
+                }
+                catch (Exception)
+                {
+                    throw new MalformedDataException();
+                }
+            }
+
+            public void ToBytes(byte[] bytes, ref int i)
+            {
+                bytes[i++] = (byte)((ListInProfile) ? 1 : 0);
+            }
+
+            public override string ToString()
+            {
+                StringBuilder output = new StringBuilder();
+                output.AppendLine("-- NewData --");
+                output.Append(String.Format("ListInProfile: {0}", ListInProfile));
+                return output.ToString();
+            }
+        }
+
         private Header header;
         public override Header Header { get { return header; } set { header = value; } }
         public override PacketType Type { get { return PacketType.SetGroupAcceptNotices; } }
         public AgentDataBlock AgentData;
         public DataBlock Data;
+        public NewDataBlock NewData;
 
         public SetGroupAcceptNoticesPacket()
         {
@@ -63307,6 +63410,7 @@
             Header.Reliable = true;
             AgentData = new AgentDataBlock();
             Data = new DataBlock();
+            NewData = new NewDataBlock();
         }
 
         public SetGroupAcceptNoticesPacket(byte[] bytes, ref int i) : this()
@@ -63325,6 +63429,7 @@
             }
             AgentData.FromBytes(bytes, ref i);
             Data.FromBytes(bytes, ref i);
+            NewData.FromBytes(bytes, ref i);
         }
 
         public SetGroupAcceptNoticesPacket(Header head, byte[] bytes, ref int i): this()
@@ -63343,18 +63448,20 @@
             }
             AgentData.FromBytes(bytes, ref i);
             Data.FromBytes(bytes, ref i);
+            NewData.FromBytes(bytes, ref i);
         }
 
         public override byte[] ToBytes()
         {
             int length = 10;
-            length += AgentData.Length;            length += Data.Length;;
+            length += AgentData.Length;            length += Data.Length;            length += NewData.Length;;
             if (header.AckList.Length > 0) { length += header.AckList.Length * 4 + 1; }
             byte[] bytes = new byte[length];
             int i = 0;
             header.ToBytes(bytes, ref i);
             AgentData.ToBytes(bytes, ref i);
             Data.ToBytes(bytes, ref i);
+            NewData.ToBytes(bytes, ref i);
             if (header.AckList.Length > 0) { header.AcksToBytes(bytes, ref i); }
             return bytes;
         }
@@ -63364,6 +63471,7 @@
             string output = "--- SetGroupAcceptNotices ---" + Environment.NewLine;
                 output += AgentData.ToString() + Environment.NewLine;
                 output += Data.ToString() + Environment.NewLine;
+                output += NewData.ToString() + Environment.NewLine;
             return output;
         }
 
@@ -71238,11 +71346,125 @@
                 return output.ToString();
             }
         }
+        /// <exclude/>
+        public class DataBlockExtendedBlock
+        {
+            private byte[] _mediatype;
+            public byte[] MediaType
+            {
+                get { return _mediatype; }
+                set
+                {
+                    if (value == null) { _mediatype = null; return; }
+                    if (value.Length > 255) { throw new OverflowException("Value exceeds 255 characters"); }
+                    else { _mediatype = new byte[value.Length]; Buffer.BlockCopy(value, 0, _mediatype, 0, value.Length); }
+                }
+            }
 
+            private byte[] _mediadesc;
+            public byte[] MediaDesc
+            {
+                get { return _mediadesc; }
+                set
+                {
+                    if (value == null) { _mediadesc = null; return; }
+                    if (value.Length > 255) { throw new OverflowException("Value exceeds 255 characters"); }
+                    else { _mediadesc = new byte[value.Length]; Buffer.BlockCopy(value, 0, _mediadesc, 0, value.Length); }
+                }
+            }
+
+            public int MediaWidth;
+            public int MediaHeight;
+            public byte MediaLoop;
+
+
+            
+            public int Length
+            {
+                get
+                {
+                    int length = 17;
+                    if (MediaType != null) { length += 1 + MediaType.Length; }
+                    if (MediaDesc != null) { length += 1 + MediaDesc.Length; }
+
+                    return length;
+                }
+            }
+
+            public DataBlockExtendedBlock() { }
+            public DataBlockExtendedBlock(byte[] bytes, ref int i)
+            {
+                FromBytes(bytes, ref i);
+            }
+
+            public void FromBytes(byte[] bytes, ref int i)
+            {
+                int length;
+                try
+                {
+                    length = (ushort)bytes[i++];
+                    _mediatype = new byte[length];
+                    Buffer.BlockCopy(bytes, i, _mediatype, 0, length); i += length;
+
+                    length = (ushort)bytes[i++];
+                    _mediadesc = new byte[length];
+                    Buffer.BlockCopy(bytes, i, _mediadesc, 0, length); i += length;
+
+                    MediaWidth = (int)(bytes[i++] + (bytes[i++] << 8) + (bytes[i++] << 16) + (bytes[i++] << 24));
+
+                    MediaHeight = (int)(bytes[i++] + (bytes[i++] << 8) + (bytes[i++] << 16) + (bytes[i++] << 24));
+
+                    MediaLoop = (byte)bytes[i++];
+               }
+                catch (Exception)
+                {
+                    throw new MalformedDataException();
+                }
+            }
+
+            public void ToBytes(byte[] bytes, ref int i)
+            {
+                if (MediaType == null) { Console.WriteLine("Warning: MediaType is null, in " + this.GetType()); }
+                bytes[i++] = (byte)MediaType.Length;
+                Buffer.BlockCopy(MediaType, 0, bytes, i, MediaType.Length); i += MediaType.Length;
+
+                if (MediaDesc == null) { Console.WriteLine("Warning: MediaDesc is null, in " + this.GetType()); }
+                bytes[i++] = (byte)MediaDesc.Length;
+                Buffer.BlockCopy(MediaDesc, 0, bytes, i, MediaDesc.Length); i += MediaDesc.Length;
+
+                bytes[i++] = (byte)(MediaWidth % 256);
+                bytes[i++] = (byte)((MediaWidth >> 8) % 256);
+                bytes[i++] = (byte)((MediaWidth >> 16) % 256);
+                bytes[i++] = (byte)((MediaWidth >> 24) % 256);
+
+                bytes[i++] = (byte)(MediaHeight % 256);
+                bytes[i++] = (byte)((MediaHeight >> 8) % 256);
+                bytes[i++] = (byte)((MediaHeight >> 16) % 256);
+                bytes[i++] = (byte)((MediaHeight >> 24) % 256);
+                bytes[i++] = MediaLoop;
+            }
+
+            public override string ToString()
+            {
+                StringBuilder output = new StringBuilder();
+                output.AppendLine("-- DataBlockExtendedBlock --");
+                Helpers.FieldToString(output, MediaType, "MediaType");
+                output.Append(Environment.NewLine);
+                Helpers.FieldToString(output, MediaDesc, "MediaDesc");
+                output.Append(Environment.NewLine);
+                output.AppendLine(String.Format("MediaWidth: {0}", MediaWidth));
+                output.Append(Environment.NewLine);
+                output.AppendLine(String.Format("MediaHeight: {0}", MediaHeight));
+                output.Append(Environment.NewLine);
+                output.Append(String.Format("MediaLoop: {0}", MediaLoop));
+                return output.ToString();
+            }
+        }
         private Header header;
         public override Header Header { get { return header; } set { header = value; } }
         public override PacketType Type { get { return PacketType.ParcelMediaUpdate; } }
         public DataBlockBlock DataBlock;
+        public DataBlockExtendedBlock DataExtendedBlock;
 
         public ParcelMediaUpdatePacket()
         {
@@ -71250,6 +71472,7 @@
             Header.ID = 420;
             Header.Reliable = true;
             DataBlock = new DataBlockBlock();
+            DataExtendedBlock = new DataBlockExtendedBlock();
         }
 
         public ParcelMediaUpdatePacket(byte[] bytes, ref int i) : this()
@@ -71267,6 +71490,7 @@
                 bytes = zeroBuffer;
             }
             DataBlock.FromBytes(bytes, ref i);
+            DataExtendedBlock.FromBytes(bytes, ref i); ;
         }
 
         public ParcelMediaUpdatePacket(Header head, byte[] bytes, ref int i): this()
@@ -71284,17 +71508,19 @@
                 bytes = zeroBuffer;
             }
             DataBlock.FromBytes(bytes, ref i);
+            DataExtendedBlock.FromBytes(bytes, ref i); ;
         }
 
         public override byte[] ToBytes()
         {
             int length = 10;
-            length += DataBlock.Length;;
+            length += DataBlock.Length; length += DataExtendedBlock.Length;
             if (header.AckList.Length > 0) { length += header.AckList.Length * 4 + 1; }
             byte[] bytes = new byte[length];
             int i = 0;
             header.ToBytes(bytes, ref i);
             DataBlock.ToBytes(bytes, ref i);
+            DataExtendedBlock.ToBytes(bytes, ref i);
             if (header.AckList.Length > 0) { header.AcksToBytes(bytes, ref i); }
             return bytes;
         }
@@ -71303,6 +71529,7 @@
         {
             string output = "--- ParcelMediaUpdate ---" + Environment.NewLine;
                 output += DataBlock.ToString() + Environment.NewLine;
+                output += DataExtendedBlock.ToString() + Environment.NewLine;
             return output;
         }
 
@@ -72058,6 +72285,203 @@
     }
 
     /// <exclude/>
+    public class ObjectIncludeInSearchPacket : Packet
+    {
+        /// <exclude/>
+        public class AgentDataBlock
+        {
+            public LLUUID AgentID;
+            public LLUUID SessionID;
+
+            public int Length
+            {
+                get
+                {
+                    return 32;
+                }
+            }
+
+            public AgentDataBlock() { }
+            public AgentDataBlock(byte[] bytes, ref int i)
+            {
+                FromBytes(bytes, ref i);
+            }
+
+            public void FromBytes(byte[] bytes, ref int i)
+            {
+                try
+                {
+                    AgentID.FromBytes(bytes, i); i += 16;
+                    SessionID.FromBytes(bytes, i); i += 16;
+                }
+                catch (Exception)
+                {
+                    throw new MalformedDataException();
+                }
+            }
+
+            public void ToBytes(byte[] bytes, ref int i)
+            {
+                Buffer.BlockCopy(AgentID.GetBytes(), 0, bytes, i, 16); i += 16;
+                Buffer.BlockCopy(SessionID.GetBytes(), 0, bytes, i, 16); i += 16;
+            }
+
+            public override string ToString()
+            {
+                StringBuilder output = new StringBuilder();
+                output.AppendLine("-- AgentData --");
+                output.AppendLine(String.Format("AgentID: {0}", AgentID));
+                output.Append(String.Format("SessionID: {0}", SessionID));
+                return output.ToString();
+            }
+        }
+
+        /// <exclude/>
+        public class ObjectDataBlock
+        {
+            public uint ObjectLocalID;
+            public bool IncludeInSearch;
+
+            public int Length
+            {
+                get
+                {
+                    return 5;
+                }
+            }
+
+            public ObjectDataBlock() { }
+            public ObjectDataBlock(byte[] bytes, ref int i)
+            {
+                FromBytes(bytes, ref i);
+            }
+
+            public void FromBytes(byte[] bytes, ref int i)
+            {
+                try
+                {
+                    ObjectLocalID = (uint)(bytes[i++] + (bytes[i++] << 8) + (bytes[i++] << 16) + (bytes[i++] << 24));
+                    IncludeInSearch = (bytes[i++] != 0) ? (bool)true : (bool)false;
+                }
+                catch (Exception)
+                {
+                    throw new MalformedDataException();
+                }
+            }
+
+            public void ToBytes(byte[] bytes, ref int i)
+            {
+                bytes[i++] = (byte)(ObjectLocalID % 256);
+                bytes[i++] = (byte)((ObjectLocalID >> 8) % 256);
+                bytes[i++] = (byte)((ObjectLocalID >> 16) % 256);
+                bytes[i++] = (byte)((ObjectLocalID >> 24) % 256);
+                bytes[i++] = (byte)((IncludeInSearch) ? 1 : 0);
+            }
+
+            public override string ToString()
+            {
+                StringBuilder output = new StringBuilder();
+                output.AppendLine("-- ObjectData --");
+                output.AppendLine(String.Format("ObjectLocalID: {0}", ObjectLocalID));
+                output.Append(String.Format("IncludeInSearch: {0}", IncludeInSearch));
+                return output.ToString();
+            }
+        }
+
+        private Header header;
+        public override Header Header { get { return header; } set { header = value; } }
+        public override PacketType Type { get { return PacketType.ObjectIncludeInSearch; } }
+        public AgentDataBlock AgentData;
+        public ObjectDataBlock[] ObjectData;
+
+        public ObjectIncludeInSearchPacket()
+        {
+            Header = new LowHeader();
+            Header.ID = 424;
+            Header.Reliable = true;
+            AgentData = new AgentDataBlock();
+            ObjectData = new ObjectDataBlock[0];
+        }
+
+        public ObjectIncludeInSearchPacket(byte[] bytes, ref int i) : this()
+        {
+            int packetEnd = bytes.Length - 1;
+            FromBytes(bytes, ref i, ref packetEnd, null);
+        }
+
+        override public void FromBytes(byte[] bytes, ref int i, ref int packetEnd, byte[] zeroBuffer)
+        {
+            header.FromBytes(bytes, ref i, ref packetEnd);
+            if (header.Zerocoded && zeroBuffer != null)
+            {
+                packetEnd = Helpers.ZeroDecode(bytes, packetEnd + 1, zeroBuffer) - 1;
+                bytes = zeroBuffer;
+            }
+            AgentData.FromBytes(bytes, ref i);
+            int count = (int)bytes[i++];
+            if(ObjectData.Length < count) {
+                ObjectData = new ObjectDataBlock[count];
+                for(int j = 0; j < count; j++) ObjectData[j] = new ObjectDataBlock();
+            }
+            for (int j = 0; j < count; j++)
+            { ObjectData[j].FromBytes(bytes, ref i); }
+        }
+
+        public ObjectIncludeInSearchPacket(Header head, byte[] bytes, ref int i): this()
+        {
+            int packetEnd = bytes.Length - 1;
+            FromBytes(head, bytes, ref i, ref packetEnd, null);
+        }
+
+        override public void FromBytes(Header head, byte[] bytes, ref int i, ref int packetEnd, byte[] zeroBuffer)
+        {
+            Header = head;
+            if (head.Zerocoded && zeroBuffer != null)
+            {
+                packetEnd = Helpers.ZeroDecode(bytes, packetEnd + 1, zeroBuffer) - 1;
+                bytes = zeroBuffer;
+            }
+            AgentData.FromBytes(bytes, ref i);
+            int count = (int)bytes[i++];
+            if(ObjectData.Length < count) {
+                ObjectData = new ObjectDataBlock[count];
+                for(int j = 0; j < count; j++) ObjectData[j] = new ObjectDataBlock();
+            }
+            for (int j = 0; j < count; j++)
+            { ObjectData[j].FromBytes(bytes, ref i); }
+        }
+
+        public override byte[] ToBytes()
+        {
+            int length = 10;
+            length += AgentData.Length;;
+            length++;
+            for (int j = 0; j < ObjectData.Length; j++) { length += ObjectData[j].Length; }
+            if (header.AckList.Length > 0) { length += header.AckList.Length * 4 + 1; }
+            byte[] bytes = new byte[length];
+            int i = 0;
+            header.ToBytes(bytes, ref i);
+            AgentData.ToBytes(bytes, ref i);
+            bytes[i++] = (byte)ObjectData.Length;
+            for (int j = 0; j < ObjectData.Length; j++) { ObjectData[j].ToBytes(bytes, ref i); }
+            if (header.AckList.Length > 0) { header.AcksToBytes(bytes, ref i); }
+            return bytes;
+        }
+
+        public override string ToString()
+        {
+            string output = "--- ObjectIncludeInSearch ---" + Environment.NewLine;
+                output += AgentData.ToString() + Environment.NewLine;
+            for (int j = 0; j < ObjectData.Length; j++)
+            {
+                output += ObjectData[j].ToString() + Environment.NewLine;
+            }
+            return output;
+        }
+
+    }
+
+    /// <exclude/>
     public class PacketAckPacket : Packet
     {
         /// <exclude/>
@@ -73580,11 +74004,57 @@
             }
         }
 
+        /// <exclude/>
+        public class AgentDataBlock
+        {
+            public LLUUID AgentID;
+
+            public int Length
+            {
+                get
+                {
+                    return 16;
+                }
+            }
+
+            public AgentDataBlock() { }
+            public AgentDataBlock(byte[] bytes, ref int i)
+            {
+                FromBytes(bytes, ref i);
+            }
+
+            public void FromBytes(byte[] bytes, ref int i)
+            {
+                try
+                {
+                    AgentID.FromBytes(bytes, i); i += 16;
+                }
+                catch (Exception)
+                {
+                    throw new MalformedDataException();
+                }
+            }
+
+            public void ToBytes(byte[] bytes, ref int i)
+            {
+                Buffer.BlockCopy(AgentID.GetBytes(), 0, bytes, i, 16); i += 16;
+            }
+
+            public override string ToString()
+            {
+                StringBuilder output = new StringBuilder();
+                output.AppendLine("-- AgentData --");
+                output.Append(String.Format("AgentID: {0}", AgentID));
+                return output.ToString();
+            }
+        }
+
         private Header header;
         public override Header Header { get { return header; } set { header = value; } }
         public override PacketType Type { get { return PacketType.CoarseLocationUpdate; } }
         public LocationBlock[] Location;
         public IndexBlock Index;
+        public AgentDataBlock[] AgentData;
 
         public CoarseLocationUpdatePacket()
         {
@@ -73593,6 +74063,7 @@
             Header.Reliable = true;
             Location = new LocationBlock[0];
             Index = new IndexBlock();
+            AgentData = new AgentDataBlock[0];
         }
 
         public CoarseLocationUpdatePacket(byte[] bytes, ref int i) : this()
@@ -73617,6 +74088,13 @@
             for (int j = 0; j < count; j++)
             { Location[j].FromBytes(bytes, ref i); }
             Index.FromBytes(bytes, ref i);
+            count = (int)bytes[i++];
+            if(AgentData.Length < count) {
+                AgentData = new AgentDataBlock[count];
+                for(int j = 0; j < count; j++) AgentData[j] = new AgentDataBlock();
+            }
+            for (int j = 0; j < count; j++)
+            { AgentData[j].FromBytes(bytes, ref i); }
         }
 
         public CoarseLocationUpdatePacket(Header head, byte[] bytes, ref int i): this()
@@ -73641,6 +74119,13 @@
             for (int j = 0; j < count; j++)
             { Location[j].FromBytes(bytes, ref i); }
             Index.FromBytes(bytes, ref i);
+            count = (int)bytes[i++];
+            if(AgentData.Length < count) {
+                AgentData = new AgentDataBlock[count];
+                for(int j = 0; j < count; j++) AgentData[j] = new AgentDataBlock();
+            }
+            for (int j = 0; j < count; j++)
+            { AgentData[j].FromBytes(bytes, ref i); }
         }
 
         public override byte[] ToBytes()
@@ -73649,6 +74134,8 @@
             length += Index.Length;;
             length++;
             for (int j = 0; j < Location.Length; j++) { length += Location[j].Length; }
+            length++;
+            for (int j = 0; j < AgentData.Length; j++) { length += AgentData[j].Length; }
             if (header.AckList.Length > 0) { length += header.AckList.Length * 4 + 1; }
             byte[] bytes = new byte[length];
             int i = 0;
@@ -73656,6 +74143,8 @@
             bytes[i++] = (byte)Location.Length;
             for (int j = 0; j < Location.Length; j++) { Location[j].ToBytes(bytes, ref i); }
             Index.ToBytes(bytes, ref i);
+            bytes[i++] = (byte)AgentData.Length;
+            for (int j = 0; j < AgentData.Length; j++) { AgentData[j].ToBytes(bytes, ref i); }
             if (header.AckList.Length > 0) { header.AcksToBytes(bytes, ref i); }
             return bytes;
         }
@@ -73668,6 +74157,10 @@
                 output += Location[j].ToString() + Environment.NewLine;
             }
                 output += Index.ToString() + Environment.NewLine;
+            for (int j = 0; j < AgentData.Length; j++)
+            {
+                output += AgentData[j].ToString() + Environment.NewLine;
+            }
             return output;
         }
 
@@ -80183,10 +80676,56 @@
             }
         }
 
+        /// <exclude/>
+        public class AgeVerificationBlockBlock
+        {
+            public bool RegionDenyAgeUnverified;
+
+            public int Length
+            {
+                get
+                {
+                    return 1;
+                }
+            }
+
+            public AgeVerificationBlockBlock() { }
+            public AgeVerificationBlockBlock(byte[] bytes, ref int i)
+            {
+                FromBytes(bytes, ref i);
+            }
+
+            public void FromBytes(byte[] bytes, ref int i)
+            {
+                try
+                {
+                    RegionDenyAgeUnverified = (bytes[i++] != 0) ? (bool)true : (bool)false;
+                }
+                catch (Exception)
+                {
+                    throw new MalformedDataException();
+                }
+            }
+
+            public void ToBytes(byte[] bytes, ref int i)
+            {
+                bytes[i++] = (byte)((RegionDenyAgeUnverified) ? 1 : 0);
+            }
+
+            public override string ToString()
+            {
+                StringBuilder output = new StringBuilder();
+                output.AppendLine("-- AgeVerificationBlock --");
+                output.Append(String.Format("RegionDenyAgeUnverified: {0}", RegionDenyAgeUnverified));
+                return output.ToString();
+            }
+        }
+
         private Header header;
         public override Header Header { get { return header; } set { header = value; } }
         public override PacketType Type { get { return PacketType.ParcelProperties; } }
         public ParcelDataBlock ParcelData;
+        public AgeVerificationBlockBlock AgeVerificationBlock;
 
         public ParcelPropertiesPacket()
         {
@@ -80194,6 +80733,7 @@
             Header.ID = 23;
             Header.Reliable = true;
             ParcelData = new ParcelDataBlock();
+            AgeVerificationBlock = new AgeVerificationBlockBlock();
         }
 
         public ParcelPropertiesPacket(byte[] bytes, ref int i) : this()
@@ -80211,6 +80751,7 @@
                 bytes = zeroBuffer;
             }
             ParcelData.FromBytes(bytes, ref i);
+            AgeVerificationBlock.FromBytes(bytes, ref i);
         }
 
         public ParcelPropertiesPacket(Header head, byte[] bytes, ref int i): this()
@@ -80228,17 +80769,19 @@
                 bytes = zeroBuffer;
             }
             ParcelData.FromBytes(bytes, ref i);
+            AgeVerificationBlock.FromBytes(bytes, ref i);
         }
 
         public override byte[] ToBytes()
         {
             int length = 7;
-            length += ParcelData.Length;;
+            length += ParcelData.Length;            length += AgeVerificationBlock.Length;;
             if (header.AckList.Length > 0) { length += header.AckList.Length * 4 + 1; }
             byte[] bytes = new byte[length];
             int i = 0;
             header.ToBytes(bytes, ref i);
             ParcelData.ToBytes(bytes, ref i);
+            AgeVerificationBlock.ToBytes(bytes, ref i);
             if (header.AckList.Length > 0) { header.AcksToBytes(bytes, ref i); }
             return bytes;
         }
@@ -80247,6 +80790,7 @@
         {
             string output = "--- ParcelProperties ---" + Environment.NewLine;
                 output += ParcelData.ToString() + Environment.NewLine;
+                output += AgeVerificationBlock.ToString() + Environment.NewLine;
             return output;
         }
 
